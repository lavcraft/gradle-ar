buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath("org.springframework.boot:spring-boot-gradle-plugin:1.3.3.RELEASE")
    classpath "io.spring.gradle:dependency-management-plugin:0.5.6.RELEASE"
  }
}


plugins {
  id 'java'
  id 'groovy'
  id 'jacoco'
  id 'distribution'
  id 'maven-publish'
  id 'com.jfrog.artifactory' version '4.1.1'
  id 'nebula.optional-base' version '3.0.3'
  id 'nebula.provided-base' version '3.0.3'
  id 'nebula.info-basic' version '3.0.3'
  id 'nebula.info-scm' version '3.0.3'
  id 'nebula.info-java' version '3.0.3'
  id 'nebula.nebula-release' version '4.0.1'
  id "org.asciidoctor.convert" version "1.5.3"
}


ext {
  springProfile = properties['profile'] ? properties['profile'] : 'stub'
  springBootVersion = '1.3.3.RELEASE'
  integrationTestRun = false
  generatedDocumentation = file('build/generated-snippets')
  snippetsDir = file('app/build/generated-snippets')
  thriftSourceDir = file('thrift-contracts/src/main/thrift/')
  javaProjects = [project(':app'), project(':domain')]
}

allprojects {
  version = version
  group = 'ru.test'

  repositories {
    mavenLocal()
    maven { url "https://repo.spring.io/milestone" } // for using spring Brixton milestones
    jcenter()
  }

  apply plugin: 'idea'
  apply plugin: 'nebula.provided-base'
  apply plugin: 'nebula.optional-base'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'com.jfrog.artifactory'

  apply plugin: 'nebula.info-scm'
  apply plugin: 'nebula.info-java'
  apply plugin: 'nebula.info-basic'

  dependencyManagement {
    dependencies {
      dependencySet(group: 'org.springframework.boot', version: springBootVersion) {
        entry 'spring-boot-starter-test'
        entry 'spring-boot-starter-amqp'
        entry 'spring-boot-starter-data-mongodb'
        entry 'spring-boot-starter-actuator'
      }

      imports {
        mavenBom 'org.springframework.cloud:spring-cloud-starter-parent:Brixton.M5'
      }

      dependency 'org.springframework.retry:spring-retry:1.1.2.RELEASE'

      dependency 'ch.qos.logback:logback-classic:1.1.6'
      dependency 'org.apache.thrift:libthrift:0.9.2'
      dependency 'net.logstash.logback:logstash-logback-encoder:4.6'
      dependency 'org.projectlombok:lombok:1.16.8'
      dependency 'org.codehaus.groovy:groovy-all:2.4.3'
      dependency 'org.testcontainers:testcontainers:1.0.2'
      dependency 'info.developerblog.spring.thrift:spring-thrift-starter:0.9.2'
      dependency 'org.springframework.restdocs:spring-restdocs-mockmvc:1.0.1.RELEASE'
      dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.3'
    }
  }

  task resolveAllDependencies {
    doLast {
      configurations.all { it.resolve() }
    }
  }
}

configure(javaProjects) {
  apply plugin: 'java'
  apply plugin: 'findbugs'
  apply plugin: 'jacoco'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  dependencies {
    provided "org.projectlombok:lombok"
  }


  compileJava {
    options.compilerArgs << '-Xlint:unchecked'
    options.fork = true
    options.forkOptions.executable = 'javac'
    options.encoding = 'UTF-8'
  }

  compileGroovy {
    options.compilerArgs << '-Xlint:unchecked'
    options.fork = true
    options.encoding = 'UTF-8'
  }

  test {
    reports {
      junitXml.enabled = true
      html.enabled = true
    }
    outputs.dir snippetsDir
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled true
      html.destination "${buildDir}/jacocoHtml"
    }
  }

  findbugs {
    ignoreFailures = true
  }

  findbugsMain {
    reports {
      xml.enabled = false
      html.enabled = true
    }
  }

  tasks.withType(FindBugs) {
    exclude '**/org/apache/thrift/*'
    classes = classes.filter {
      !it.path.contains(new File("org/apache/thrift/").path)
    }
  }

  task sourceJar(type: Jar, dependsOn: ['build']) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }
}

project(':app') {
  apply plugin: 'maven-publish'

  dependencies {
    compile 'org.codehaus.groovy:groovy-all'

    testCompile "org.springframework.boot:spring-boot-starter-test"
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'org.spockframework:spock-spring:1.0-groovy-2.4'
    testCompile 'org.testcontainers:testcontainers:1.0.2'
  }

  publishing {
    publications {
      appFull(MavenPublication) {
        from components.java
        artifact sourceJar {
          classifier "sources"
        }
      }
    }
  }
}

project(':thrift-contracts') {
  apply plugin: 'java'
}

project(':docs') {
  apply plugin: 'distribution'
  apply plugin: 'org.asciidoctor.convert'

  asciidoctor {
    finalizedBy distZip
    inputs.dir snippetsDir
    dependsOn project(':app').test

    attributes 'source-highlighter': 'coderay',
        'imagesdir': 'images',
        'toc': 'left',
        'icons': 'font',
        'setanchors': 'true',
        'idprefix': '',
        'idseparator': '-',
        'docinfo1': 'true',
        'toclevels': 5,
        'snippets': snippetsDir,
        'thriftsrc': thriftSourceDir
  }

  distributions {
    main {
      baseName = 'app-doc-full'
      contents {
        from { "$buildDir/asciidoc/html5/" }
      }
    }
  }

  publishing {
    publications {
      appFull(MavenPublication) {
        artifactId 'app'
        artifact distZip {
          classifier "docs"
        }
      }
    }
  }
}

artifactory {
  clientConfig.publisher.repoKey = extractRepo(version.toString())
  clientConfig.setIncludeEnvVars(true)
  contextUrl = "$artifactory_contextUrl"
  publish {
    repository {
      username = "${artifactory_user}"
      password = "${artifactory_password}"
      maven = true
    }
    defaults {
      publications('appFull')
      publishArtifacts = true
      publishPom = true
    }
  }
  resolve {
    repository {
      repoKey = 'public'
      username = "${artifactory_user}"
      password = "${artifactory_password}"
      maven = true
    }
  }
}
//  artifactoryPublish.dependsOn mavenPublish

//}

artifactoryPublish.skip = true


task testReport(type: TestReport) {
  destinationDir = file("$buildDir/reports/allTests")
  reportOn javaProjects*.test.binResultsDir
}

test.finalizedBy(testReport)

def extractRepo(String versionNumber) {
  println '=' * 100
  versionNumber.contains('-dev') ? 'snapshots' : 'releases'
}

task wrapper(type: Wrapper) {
  gradleVersion = '2.12'
}
